from .models import RuleSet, Rule
from core.models import Artefact
from .ai import suggest_rules_from_log
from django.contrib.auth.models import User

def generate_rule_set_from_artefact(artefact: Artefact, user: User) -> RuleSet:
    records = artefact.records.order_by("record_index")[:200]
    log_text = "\n".join(r.content for r in records)

    rule_tree = suggest_rules_from_log(log_text)

    ruleset = RuleSet.objects.create(
        name=f"AI RuleSet: {artefact.name}",
        description="Generated by Gemini",
        created_by=user,
        is_active=True
    )

    def save_rule_group(group, parent=None):
        for child in group.children:
            if isinstance(child, dict) and "field" in child:
                Rule.objects.create(
                    rule_set=ruleset,
                    parent_rule=parent,
                    logic_operator=group.logic,
                    name=f"{child['field']} {child['operator']} {child['value']}",
                    field=child["field"],
                    operator=child["operator"],
                    value=child["value"],
                    severity=child.get("severity", "medium"),
                    tags=child.get("tags", []),
                )
            else:
                save_rule_group(child, parent)

    save_rule_group(rule_tree)
    return ruleset

